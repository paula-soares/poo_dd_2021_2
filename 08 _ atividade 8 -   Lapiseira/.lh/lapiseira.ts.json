{
    "sourceFile": "lapiseira.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1644356769619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1644356782970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         this.calibre = calibre;\r\n         this.bico = 0;\r\n         this.temGrafiteNoBico = false;\r\n         this.grafites = new Array<Grafite>(capacidadeDoTambor);\r\n-        this.\r\n+        this.grafiteEmUso = null;\r\n     }\r\n \r\n     inserirGrafiteNoTambor(calibre: number, dureza: string, tamanho: number): void  {\r\n         if(calibre != this.calibre) {\r\n"
                },
                {
                    "date": 1644356822381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     calibre: number; // 0.7, 0.9\r\n     bico: number;\r\n     temGrafiteNoBico: boolean;\r\n     grafites: Array<Grafite>;\r\n-    grafiteEmUso: Grafite;\r\n+    grafiteEmUso?: Grafite;\r\n \r\n     constructor(calibre: number, capacidadeDoTambor: number) {\r\n         this.calibre = calibre;\r\n         this.bico = 0;\r\n"
                },
                {
                    "date": 1644356888863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         this.calibre = calibre;\r\n         this.bico = 0;\r\n         this.temGrafiteNoBico = false;\r\n         this.grafites = new Array<Grafite>(capacidadeDoTambor);\r\n-        this.grafiteEmUso = null;\r\n+        this.grafiteEmUso = new ;\r\n     }\r\n \r\n     inserirGrafiteNoTambor(calibre: number, dureza: string, tamanho: number): void  {\r\n         if(calibre != this.calibre) {\r\n"
                },
                {
                    "date": 1644356898634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         this.calibre = calibre;\r\n         this.bico = 0;\r\n         this.temGrafiteNoBico = false;\r\n         this.grafites = new Array<Grafite>(capacidadeDoTambor);\r\n-        this.grafiteEmUso = new ;\r\n+        this.grafiteEmUso = new Grafite(capacidadeDoTambor);\r\n     }\r\n \r\n     inserirGrafiteNoTambor(calibre: number, dureza: string, tamanho: number): void  {\r\n         if(calibre != this.calibre) {\r\n"
                },
                {
                    "date": 1644356966515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         this.calibre = calibre;\r\n         this.bico = 0;\r\n         this.temGrafiteNoBico = false;\r\n         this.grafites = new Array<Grafite>(capacidadeDoTambor);\r\n-        this.grafiteEmUso = new Grafite(capacidadeDoTambor);\r\n+        this.grafiteEmUso = new Grafite();\r\n     }\r\n \r\n     inserirGrafiteNoTambor(calibre: number, dureza: string, tamanho: number): void  {\r\n         if(calibre != this.calibre) {\r\n@@ -120,8 +120,10 @@\n         this.dureza = dureza;\r\n         this.tamanho = tamanho;    \r\n     }\r\n \r\n+    constructor() {}\r\n+\r\n     public getCalibre(){\r\n         return this.calibre;\r\n     }\r\n \r\n"
                },
                {
                    "date": 1644356973194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,10 +120,8 @@\n         this.dureza = dureza;\r\n         this.tamanho = tamanho;    \r\n     }\r\n \r\n-    constructor() {}\r\n-\r\n     public getCalibre(){\r\n         return this.calibre;\r\n     }\r\n \r\n"
                },
                {
                    "date": 1644356985622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         this.calibre = calibre;\r\n         this.bico = 0;\r\n         this.temGrafiteNoBico = false;\r\n         this.grafites = new Array<Grafite>(capacidadeDoTambor);\r\n-        this.grafiteEmUso = new Grafite();\r\n+        this.grafiteEmUso = null;\r\n     }\r\n \r\n     inserirGrafiteNoTambor(calibre: number, dureza: string, tamanho: number): void  {\r\n         if(calibre != this.calibre) {\r\n"
                },
                {
                    "date": 1644357012884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n         return this.grafiteEmUso.tamanho <= 1;\r\n     }\r\n     \r\n     gastarGrafite(grafiteGasto: number): any {\r\n+        if(this.ga)\r\n         let tamanhoDoGrafite = this.grafiteEmUso.tamanho - grafiteGasto;\r\n         if (tamanhoDoGrafite <= 1) {\r\n             console.log('nao há tamanho suficiente para escrever com o grafite em uso. por favor recarregue-o!');\r\n             return;\r\n"
                },
                {
                    "date": 1644357018445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n         return this.grafiteEmUso.tamanho <= 1;\r\n     }\r\n     \r\n     gastarGrafite(grafiteGasto: number): any {\r\n-        if(this.ga)\r\n+        if(this.grafiteEmUso != undefined)\r\n         let tamanhoDoGrafite = this.grafiteEmUso.tamanho - grafiteGasto;\r\n         if (tamanhoDoGrafite <= 1) {\r\n             console.log('nao há tamanho suficiente para escrever com o grafite em uso. por favor recarregue-o!');\r\n             return;\r\n"
                },
                {
                    "date": 1644357038720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,12 @@\n         return this.grafiteEmUso.tamanho <= 1;\r\n     }\r\n     \r\n     gastarGrafite(grafiteGasto: number): any {\r\n-        if(this.grafiteEmUso != undefined)\r\n+        let tamanhoDoGrafite;\r\n+        if(this.grafiteEmUso != undefined){\r\n+\r\n+        }\r\n         let tamanhoDoGrafite = this.grafiteEmUso.tamanho - grafiteGasto;\r\n         if (tamanhoDoGrafite <= 1) {\r\n             console.log('nao há tamanho suficiente para escrever com o grafite em uso. por favor recarregue-o!');\r\n             return;\r\n"
                },
                {
                    "date": 1644357044874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,11 +97,10 @@\n     \r\n     gastarGrafite(grafiteGasto: number): any {\r\n         let tamanhoDoGrafite;\r\n         if(this.grafiteEmUso != undefined){\r\n-\r\n+            tamanhoDoGrafite = this.grafiteEmUso.tamanho - grafiteGasto;\r\n         }\r\n-        let tamanhoDoGrafite = this.grafiteEmUso.tamanho - grafiteGasto;\r\n         if (tamanhoDoGrafite <= 1) {\r\n             console.log('nao há tamanho suficiente para escrever com o grafite em uso. por favor recarregue-o!');\r\n             return;\r\n         }\r\n"
                },
                {
                    "date": 1644357072134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,12 +95,9 @@\n         return this.grafiteEmUso.tamanho <= 1;\r\n     }\r\n     \r\n     gastarGrafite(grafiteGasto: number): any {\r\n-        let tamanhoDoGrafite;\r\n-        if(this.grafiteEmUso != undefined){\r\n-            tamanhoDoGrafite = this.grafiteEmUso.tamanho - grafiteGasto;\r\n-        }\r\n+        let tamanhoDoGrafite = this.grafiteEmUso.tamanho - grafiteGasto;\r\n         if (tamanhoDoGrafite <= 1) {\r\n             console.log('nao há tamanho suficiente para escrever com o grafite em uso. por favor recarregue-o!');\r\n             return;\r\n         }\r\n"
                },
                {
                    "date": 1644357400074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \r\n     inserir(): void {\r\n         this.bico++;\r\n         this.temGrafiteNoBico = true;\r\n-        this.grafiteEmUso = this.removerGrafiteDoTambor();\r\n+        this.grafiteEmUso = this.removerGrafiteDoTambor(); // retorna o elemento removido no caso o Grafite\r\n     }\r\n \r\n     removerGrafiteDoBico(): any {\r\n         if(this.bico <= 0)\r\n"
                },
                {
                    "date": 1644357457990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         }\r\n     }\r\n     \r\n     possoEscrever(): boolean {\r\n-        return this.grafiteEmUso.tamanho >= 1;\r\n+        return this.grafiteEmUso.tamanho > 1;\r\n     }\r\n \r\n     acabouOGrafite(): boolean {\r\n         return this.grafiteEmUso.tamanho <= 1;\r\n"
                },
                {
                    "date": 1644422147631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     calibre: number; // 0.7, 0.9\r\n     bico: number;\r\n     temGrafiteNoBico: boolean;\r\n     grafites: Array<Grafite>;\r\n-    grafiteEmUso?: Grafite;\r\n+    grafiteEmUso: Grafite;\r\n \r\n     constructor(calibre: number, capacidadeDoTambor: number) {\r\n         this.calibre = calibre;\r\n         this.bico = 0;\r\n@@ -80,12 +80,9 @@\n \r\n         let grafiteGasto = this.grafiteEmUso.tamanho * totalDeFolhas;\r\n         this.gastarGrafite(grafiteGasto);\r\n \r\n-        if (this.acabouOGrafite()) {\r\n-            this.removerGrafiteDoBico();\r\n-            this.grafiteEmUso = null;\r\n-        }\r\n+        x\r\n     }\r\n     \r\n     possoEscrever(): boolean {\r\n         return this.grafiteEmUso.tamanho > 1;\r\n"
                },
                {
                    "date": 1644422196691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n         this.calibre = calibre;\r\n         this.bico = 0;\r\n         this.temGrafiteNoBico = false;\r\n         this.grafites = new Array<Grafite>(capacidadeDoTambor);\r\n-        this.grafiteEmUso = ;\r\n+        this.grafiteEmUso = g;\r\n     }\r\n \r\n     inserirGrafiteNoTambor(calibre: number, dureza: string, tamanho: number): void  {\r\n         if(calibre != this.calibre) {\r\n"
                },
                {
                    "date": 1644422230087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,12 @@\n \r\n         let grafiteGasto = this.grafiteEmUso.tamanho * totalDeFolhas;\r\n         this.gastarGrafite(grafiteGasto);\r\n \r\n-        x\r\n+        if (this.acabouOGrafite()) {\r\n+            this.removerGrafiteDoBico();\r\n+            this.grafiteEmUso = null;\r\n+        }\r\n     }\r\n     \r\n     possoEscrever(): boolean {\r\n         return this.grafiteEmUso.tamanho > 1;\r\n"
                }
            ],
            "date": 1644356769619,
            "name": "Commit-0",
            "content": "import { Console } from \"console\";\r\n\r\n\r\nconst readline = require (\"readline-sync\");\r\nlet input = () => readline.question(); /// função pra ler o que é escrito que funciona através dos pacotes que foram instalados\r\nlet write = (x: any ) => process.stdout.write(\" \" + x); /// aqui é pra não quebrar a linha \r\n\r\nclass Lapiseira {\r\n    calibre: number; // 0.7, 0.9\r\n    bico: number;\r\n    temGrafiteNoBico: boolean;\r\n    grafites: Array<Grafite>;\r\n    grafiteEmUso: Grafite;\r\n\r\n    constructor(calibre: number, capacidadeDoTambor: number) {\r\n        this.calibre = calibre;\r\n        this.bico = 0;\r\n        this.temGrafiteNoBico = false;\r\n        this.grafites = new Array<Grafite>(capacidadeDoTambor);\r\n        this.\r\n    }\r\n\r\n    inserirGrafiteNoTambor(calibre: number, dureza: string, tamanho: number): void  {\r\n        if(calibre != this.calibre) {\r\n            console.log('calibre incompativel!');\r\n        }\r\n\r\n        else {\r\n            let grafite = new Grafite(calibre, dureza, tamanho);\r\n\r\n            this.grafites.push(grafite);\r\n        }\r\n\r\n    }\r\n\r\n    inserirNoBico(): void {\r\n        if(this.temGrafiteNoBico == true) { // [this.temGrafiteNoBico]\r\n            this.removerGrafiteDoBico();\r\n            this.removerGrafiteDoTambor();\r\n            this.inserir();\r\n            \r\n            return;\r\n        }\r\n        \r\n        this.inserir();\r\n    }\r\n\r\n    inserir(): void {\r\n        this.bico++;\r\n        this.temGrafiteNoBico = true;\r\n        this.grafiteEmUso = this.removerGrafiteDoTambor();\r\n    }\r\n\r\n    removerGrafiteDoBico(): any {\r\n        if(this.bico <= 0)\r\n            return;\r\n\r\n        this.bico--;\r\n        this.temGrafiteNoBico = false;\r\n    }\r\n\r\n    removerGrafiteDoTambor(): any {\r\n        if(this.grafites.length > 0){\r\n            return this.grafites.pop(); // além de remover o último elemento no Array(vetor), também retorna o elemento removido no caso o Grafite.\r\n        }\r\n\r\n        console.log('os grafites do tambor acabaram');\r\n    }\r\n\r\n    escrever(totalDeFolhas: number): any {\r\n        if (!this.temGrafiteNoBico){ // mesma coisa que isso: [this.temGrafiteNoBico == false]\r\n            console.log('não tem grafite!');\r\n            return;\r\n        }\r\n\r\n        if (!this.possoEscrever()){\r\n            console.log('nao há tamanho suficiente para escrever com o grafite em uso. por favor recarregue-o!');\r\n            return;\r\n        }\r\n\r\n        let grafiteGasto = this.grafiteEmUso.tamanho * totalDeFolhas;\r\n        this.gastarGrafite(grafiteGasto);\r\n\r\n        if (this.acabouOGrafite()) {\r\n            this.removerGrafiteDoBico();\r\n            this.grafiteEmUso = null;\r\n        }\r\n    }\r\n    \r\n    possoEscrever(): boolean {\r\n        return this.grafiteEmUso.tamanho >= 1;\r\n    }\r\n\r\n    acabouOGrafite(): boolean {\r\n        return this.grafiteEmUso.tamanho <= 1;\r\n    }\r\n    \r\n    gastarGrafite(grafiteGasto: number): any {\r\n        let tamanhoDoGrafite = this.grafiteEmUso.tamanho - grafiteGasto;\r\n        if (tamanhoDoGrafite <= 1) {\r\n            console.log('nao há tamanho suficiente para escrever com o grafite em uso. por favor recarregue-o!');\r\n            return;\r\n        }\r\n\r\n        this.grafiteEmUso.tamanho -= tamanhoDoGrafite;\r\n    }\r\n\r\n    toString() {\r\n        return `calibre: ${this.calibre} temGrafiteNoBico: ${this.temGrafiteNoBico} grafites no tambor: ${this.grafites.length}`\r\n    }\r\n}\r\n\r\nclass Grafite {\r\n    calibre: number;\r\n    dureza: string;\r\n    tamanho: number;\r\n\r\n    constructor(calibre:number, dureza:string, tamanho:number){\r\n        this.calibre = calibre;\r\n        this.dureza = dureza;\r\n        this.tamanho = tamanho;    \r\n    }\r\n\r\n    public getCalibre(){\r\n        return this.calibre;\r\n    }\r\n\r\n    public setCalibre(calibre: number) {\r\n        this.calibre = calibre;\r\n    }\r\n\r\n    public getDureza(){\r\n        return this.dureza;\r\n    }\r\n\r\n    public setDureza(dureza: string){\r\n        this.dureza = dureza;\r\n    }\r\n\r\n    public getTamanho(){\r\n        return this.tamanho;\r\n    }\r\n\r\n    public setTamanho(tamanho: number){\r\n        this.tamanho = tamanho;\r\n    }\r\n\r\n    gastoPorFolha(): number {\r\n        if (this.dureza === 'HB')\r\n            return 1;\r\n        else if (this.dureza === '2B')\r\n            return 2;\r\n        else if (this.dureza === '4B')\r\n            return 4;\r\n        else if (this.dureza === '6B')\r\n            return 6;\r\n        else\r\n            return 0;\r\n    }\r\n\r\n}\r\n\r\nclass inicilizacao {\r\n    criarLapiseira(): Lapiseira {\r\n      write(\"digite o calibre da lapiseira\");\r\n      let calibre = input ();\r\n      write(\"digite a capacidade do tambor\")\r\n      let capacidadeDoTambor = input();\r\n    \r\n      return new Lapiseira (calibre, capacidadeDoTambor);\r\n    }\r\n  \r\n  \r\n    help () {\r\n      write (\"comandos: \\n\");\r\n      write (\"iniciar: <calibre> <tamanho do tambor>\")\r\n      write (\"inserirGrafiteNoTambor: <calibre> <dureza> <tamanho> \")\r\n      write (\"inserirGrafiteNoBico\")\r\n      write (\"escrever: <total de folhas que deseja escrever>\")\r\n  \r\n    }\r\n    \r\n    menu () {\r\n  \r\n      let lapiseira = this.criarLapiseira();\r\n      while(true) {\r\n        let linha = input();\r\n        let palavras =  linha.split(\" \"); \r\n\r\n        if(palavras[0] == \"sair\") {\r\n          break;\r\n        } else if (palavras[0] == \"iniciar\"){\r\n          write (\" ESTA É SUA LAPISEIRA ｡◕‿◕｡ \" + lapiseira + \"\\n\");\r\n        } else if (palavras[0] == \"inserirGrafiteNoTambor\"){\r\n          lapiseira = new Lapiseira(palavras[1], palavras[2]);\r\n        } else if (palavras[0] == \"inserirGrafiteNoBico\"){\r\n          lapiseira.inserirGrafiteNoTambor(palavras[1], palavras[2], palavras[3]);\r\n        } else if (palavras[0] == \"escrever\"){\r\n          lapiseira.escrever(palavras[1]);\r\n        } else {\r\n          console.log(\"comando inválido, digite novamente! \")\r\n        }\r\n  \r\n    }\r\n  }}\r\n\r\n    let iniciar = new inicilizacao();\r\n    iniciar.menu();\r\n"
        }
    ]
}
{
    "sourceFile": "tamagoshiok.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1642038744630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1642038744630,
            "name": "Commit-0",
            "content": "\r\n//const readline = require (\"readline-sync\");\r\n//console.log(\"Digite o seu nome:\")\r\n//let nome = readline.question();\r\n//console.log(\"Ola, meu amigo \" + nome);\r\n\r\n///let nome = readline.question();\r\n//console.log(\"Ola, meu amigo \" + nome);\r\n\r\n\r\nconst readline = require (\"readline-sync\");\r\nlet input = () => readline.question(); /// função pra ler o que é escrito que funciona através dos pacotes que foram instalados\r\nlet write = (x: any ) => process.stdout.write(\" \" + x); /// aqui é pra não quebrar a linha \r\n\r\n\r\nclass Bichim {\r\n  private nome: string = \" \"; /// o private é um controlador de acesso, relembrando que temos, public, private e protected, no caso usando\r\n  private energia:number; /// o private, isso torna o acessso a nome, e energia apenas dentro da classe, eu vi em um texto que no typescript\r\n  private energiamax:number; /// o private não funciona na real, o uso no typescript desse controlador fica apenas como uma sugestão, \r\n  private vivooumorto:boolean = true; /// como esse atributo começa definido como true não há necessidade de ser colocado no constructor\r\n  private higiene:number;\r\n  private higienemin:number;\r\n  private alegria:number;\r\n  private alegriamin:number;\r\n  getBanho: string;\r\n  \r\n\r\n  constructor(nome:string, energiamax:number, higiene:number, felicidade:number, alegria:number) {\r\n    this.setNome(nome); \r\n\r\n    this.energia = energiamax; //// aqui fica assim pq energia começa com energia máxima\r\n    this.energiamax = energiamax;\r\n\r\n    this.higiene = higiene;\r\n    this.higienemin = higiene - 80 ;\r\n\r\n    this.alegria = alegria;\r\n    this.alegriamin = alegria - 80;\r\n  \r\n  }\r\n\r\n  public toString(){\r\n    if( this.vivooumorto = true) \r\n        return this.nome + \" : \" + this.energia + \" / \" + this.energiamax + \" / \" + this.higiene  + \" / \" + this.higienemin + \" / \" + this.alegria + \" / \" + this.alegriamin;\r\n    return  \"o \" + this.nome + \" está morto :( \"\r\n  }\r\n\r\n  \r\n  public getNome(): string { /// get dando acesso, não há aqi nenhuma necessidade restritiva \r\n    return this.nome;\r\n  }\r\n\r\n    public getEnergia ():number{ /// get dando acesso, não há aqi nenhuma necessidade restritiva \r\n      return this.energia\r\n  }\r\n\r\n  public getEnergiamax ():number{ /// get dando acesso, não há aqi nenhuma necessidade restritiva \r\n    return this.energia\r\n  }\r\n\r\n  public getAlegria ():number{ /// get dando acesso, não há aqi nenhuma necessidade restritiva \r\n    return this.alegria\r\n  }  \r\n\r\n  public getAlegriamin ():number{ /// get dando acesso, não há aqi nenhuma necessidade restritiva \r\n    return this.alegriamin\r\n  }  \r\n  \r\n  public getHigiene ():number{ /// get dando acesso, não há aqi nenhuma necessidade restritiva \r\n    return this.higiene\r\n  }\r\n\r\n  public getHigienemin ():number{ /// get dando acesso, não há aqi nenhuma necessidade restritiva \r\n    return this.higienemin\r\n  }\r\n\r\n  public setNome(nome:string){ /// o length mede o tamanho da lista, então se nome.length for igual a 0 é porque não foi colocado nada\r\n    if( nome.length == 0 ){    //// em nome, dai vai receber por padrao \"tamagoshi\"\r\n        this.nome = \"tamagoshi\" \r\n\r\n    } else {\r\n        this.nome = nome;\r\n    }\r\n  }\r\n\r\n  public setEnergia(energia:number){ /// criando outro set restritivo onde se energia for menor que 0, energia recebe 0\r\n      if (energia < 0 ){                //// e se energia for maior que energia maxima, energia recebe energia máxima, isso faz com que\r\n          this.energia = 0;             /// energia fique sempre entre o valor de 0 e o valor definido como energia máxima \r\n          this.vivooumorto = false;\r\n          console.log(\"morreu de fome :( \");     /// porem se isso acontecer, vivooumorto recebe false e o bicho morre ( tem q colocar la no toString)       \r\n      } else if ( energia > this.energiamax ){\r\n          this.energia = this.energiamax; \r\n          this.vivooumorto = false;\r\n          console.log(\"morreu de comer de mais!:( \");  //// se comer de mais também morre \r\n      } else if ( this.energia == this.energiamax - 80){\r\n          console.log(\"precisa comer ou vai morrer :(\")\r\n      } else {\r\n          this.energia = energia   /// se energia não for menor que 0 , nem maior que o máximo de energia, energia vai ser igual ao valor de energia  estabelecido \r\n      } \r\n  }\r\n\r\n\r\n  public setAlegriamin(alegriamin:number){\r\n    if (this.alegriamin > 0 && this.alegriamin < 30){\r\n    } else if (this.energia > 0 && this.energia < 30 ){\r\n    } write(\"Seu bicho ta triste e com fome ◑︿◐\" )\r\n  }\r\n\r\n  public setHigienemin(higienemin:number){\r\n    if (this.higienemin > 0 && this.higienemin < 30){\r\n    } write(\"Seu bicho ta sujooo ◑▂◐ \")\r\n  }\r\n  \r\n  public setBanho(): void {\r\n        if(!this.vivooumorto) {\r\n            console.log(\" SEU BICHO MORREU NÃO PRECISA DE BANNHO ~~((-_-))~~_ \\n\")\r\n            return;\r\n        }\r\n        this.setHigienemin(this.getHigienemin() + 50);\r\n        this.setEnergia(this.getEnergia() - 10);\r\n        this.setAlegriamin(this.getAlegriamin() + 20)\r\n        write (\"bichinho banhadooo (◡‿◡✿) \")\r\n  }\r\n\r\n  public setComer(): void {\r\n        if(!this.vivooumorto) {\r\n            console.log(\" SEU BICHO MORREU NÃO PRECISA COMER ~~((-_-))~~_ \\n\")\r\n            return;\r\n        }\r\n        this.setEnergia(this.getEnergia() + 50);\r\n        this.setAlegriamin(this.getAlegriamin() + 20)\r\n        write(\"bichinho alimentado ｡◕‿◕｡ \")\r\n  }\r\n\r\n  public setBrincar(): void {\r\n    if(!this.vivooumorto) {\r\n        console.log(\" SEU BICHO MORREU NÃO PODE BRINCAR ~~((-_-))~~_  \\n\")\r\n        return;\r\n    }\r\n    this.setEnergia(this.getEnergia() - 50);\r\n    this.setAlegriamin(this.getAlegriamin() + 40)\r\n    this.setHigienemin(this.getHigienemin() - 50);\r\n    write(\"bichinho feliz <3 ⊱✿◕‿◕✿⊰ \")\r\n    \r\n  \r\n} }\r\n\r\nclass inicilizacao {\r\n  criarbichim(): Bichim {\r\n    write(\"digite o nome do seu bichim\");\r\n    let nome = input ();\r\n    write(\"digite o máximo de energia\")\r\n    let energiamax = input();\r\n    write(\"digite higiene\");\r\n    let higiene = input();\r\n  \r\n    let bichim = new Bichim (nome,energiamax,0,0,0);\r\n    return bichim\r\n    \r\n  }\r\n\r\n\r\n  help () {\r\n    write (\"comandos: \\n\");\r\n    write (\"iniciar: <nome> <energiamax> < higiene> <felicidade> <alegria> : cria um novo bichim\")\r\n    write (\"mostrar: mostra o estado do seu bichim \")\r\n    write (\"brinca: faz o bichim brincar\")\r\n    write (\"come: faz o bichim comer\")\r\n    write (\"banho: faz o bichim se limpar\")\r\n    write (\"sair: sai do jogo\")\r\n\r\n  }\r\n  \r\n  menu () {\r\n\r\n    let bichim = this.criarbichim ();\r\n    while(true) {\r\n      let linha = input();\r\n      let palavras =  linha.split(\" \"); \r\n      if(palavras[0] == \"sair\") {\r\n        break;\r\n      } else if (palavras[0] == \"mostrar\"){\r\n        write (\" ESTE É O SEU BICHIM ｡◕‿◕｡ \" + bichim + \"\\n\");\r\n      } else if (palavras[0] == \"iniciar\"){\r\n        bichim = new Bichim(palavras[1],+palavras[2],+palavras[3],+palavras[4],+palavras[5]);\r\n      } else if (palavras[0] == \"brinca\"){\r\n        write(\" bichindo banhando <3 \" + bichim.setBrincar)\r\n      } else if (palavras[0] == \"come\"){\r\n        write(\" bichinho comendo <3 \" + bichim.setComer)\r\n      } else if (palavras[0] == \"banho\"){\r\n        write(\" bichinho banhando <3 \" + bichim.Banho)\r\n      }else {\r\n        console.log(\"comando inválido, digite novamente! \")\r\n      }\r\n\r\n  }\r\n\r\n  \r\n\r\n\r\n}}\r\n\r\nlet iniciar = new inicilizacao();\r\niniciar.menu();"
        }
    ]
}